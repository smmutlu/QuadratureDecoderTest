/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "quadratureDecoder.h"
#include "sleep.h"
#include "XGPIO.h"
#define QD_BASE_ADDRESS 0x43C00000
#define GPIO_DEVICE_ID	XPAR_GPIO_0_DEVICE_ID

XGpio GpioA;
int main()
{
    init_platform();
	int Status;

		/*
		 * Initialize the GPIO driver so that it's ready to use,
		 * specify the device ID that is generated in xparameters.h
		 */
		 Status = XGpio_Initialize(&GpioA, GPIO_DEVICE_ID);
		 if (Status != XST_SUCCESS)  {
			  return XST_FAILURE;
		 }

		 /* Set the direction for all signals to be inputs, except LIDAR AND DYNAMIXEL Bridge*/
		 XGpio_SetDataDirection(&GpioA, 1, 0x00000000);
		 XGpio_DiscreteClear(&GpioA,1,0xFFFFFFFF);
    QUADRATUREDECODER_mWriteReg(QD_BASE_ADDRESS,0,0x00000001);
    QUADRATUREDECODER_mWriteReg(QD_BASE_ADDRESS,0,0x00000000);
    usleep(100);
    QUADRATUREDECODER_mWriteReg(QD_BASE_ADDRESS,0,0x00000001);

    u32 scan= 0;
    int count = 0,prevCount = 0, forwCount=0,backCount = 0;
    int hold;
    while(1)
    {
    	scan = QUADRATUREDECODER_mReadReg(QD_BASE_ADDRESS,12);
		count = scan&0x7FFFFFFF;
		hold = count-prevCount;
		if (scan & 0x80000000)
    	{
    		if(hold>1023)
    		{
    			prevCount = count;
    			forwCount++;
    			XGpio_DiscreteSet(&GpioA,1,0xFFFFFFFF);
    			usleep(10000);
    			XGpio_DiscreteClear(&GpioA,1,0xFFFFFFFF);
    			hold = 0;
    		}
    		if(hold < 0)
    		{
    		//	prevCount = (u32)((int)0x7FFFFFFF - (int)prevCount);
    		}
    		if (forwCount> 15)
    			forwCount= 0;
    	}
    	else if (!(scan & 0x80000000)&& hold!=0)
    	{

    		if(hold>1023)
    		{
    			prevCount = count;
    			forwCount++;
    			XGpio_DiscreteSet(&GpioA,1,0xFFFFFFFF);
    			usleep(10000);
    			XGpio_DiscreteClear(&GpioA,1,0xFFFFFFFF);
    			hold = 0;
    		}
    		if(hold < 0)
    		{
    			//prevCount = 0x7FFFFFFF - prevCount;
    		}
    		if (backCount> 15)
    			backCount= 0;

    	}
    }
    cleanup_platform();
    return 0;
}
